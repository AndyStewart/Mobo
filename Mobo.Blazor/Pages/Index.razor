@page "/"
@using System
@using System.Threading
@implements IDisposable
@functions {
    private ICountDownTimer _countDownTimer = new CountDownTimer(new Clock(), CountDownTimer.Default);
    private Timer _uiRefreshTimer;

    protected override void OnInitialized()
    {
        TimerLength = CountDownTimer.Default.Minutes;
        _uiRefreshTimer = new Timer(state => InvokeAsync(StateHasChanged), null, TimeSpan.FromSeconds(0), TimeSpan.FromMilliseconds(100));
    }

    public void Dispose() => _uiRefreshTimer?.Dispose();
    
    private void StartTimer(MouseEventArgs obj) 
    {
        _countDownTimer = new CountDownTimer(new Clock(), TimeSpan.FromMinutes(this.TimerLength));
        _countDownTimer = _countDownTimer.Start();
    }

    private void PauseTimer(MouseEventArgs obj) => _countDownTimer=_countDownTimer.Stop();

    private void ResumeTimer(MouseEventArgs obj) => _countDownTimer = _countDownTimer.Start();

    public int TimerLength { get; set; }
}
<div class="container-fluid">
    <div class="row justify-content-center">
        <div class="timer col-8 text-center">
            @_countDownTimer.ToString()
        </div>
    </div>
    <form>
        <div class="row justify-content-center">
            <label for="timer-length" class="col-sm-2 col-form-label">Timer length:</label>
            <div class="col-sm-4">
                <input type="number" id="timer-length" class="form-control"
                       disabled="@(_countDownTimer is InProgressTimer)"
                       @bind=TimerLength/>
            </div>
            <div class="col-sm-4">
                @if (_countDownTimer is CountDownTimer || _countDownTimer.TimeLeft == TimeSpan.Zero)
                {
                    <button class="btn btn-primary start-timer" @onclick=StartTimer>Start</button>
                }

                @if (_countDownTimer is InProgressTimer)
                {
                    <button class="btn btn-primary pause-timer" @onclick=PauseTimer>Pause</button>
                }

                @if (_countDownTimer is PausedTimer)
                {
                    <button class="btn btn-primary resume-timer" @onclick=ResumeTimer>Resume</button>
                }
            </div>
        </div>
    </form>
</div>