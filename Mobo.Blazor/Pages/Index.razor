@page "/"
@using System.Threading
@implements IDisposable
@functions {
    private CountDownTimer _countDownTimer = new CountDownTimer(new Clock(), TimeSpan.FromMinutes(15));
    private Timer _uiRefreshTimer;

    protected override void OnInitialized() 
        => _uiRefreshTimer = new Timer(state => InvokeAsync(StateHasChanged), null, TimeSpan.FromSeconds(0), TimeSpan.FromMilliseconds(100));

    public void Dispose() => _uiRefreshTimer?.Dispose();
    
    private void StartTimer(MouseEventArgs obj) => _countDownTimer.Start();

    private void PauseTimer(MouseEventArgs obj) => _countDownTimer.Stop();

    private void ResumeTimer(MouseEventArgs obj)
    {
        _countDownTimer = new CountDownTimer(new Clock(), _countDownTimer.TimeLeft);
        _countDownTimer.Start();
    }

    private bool CountDownStarted() => _countDownTimer.TimeLeft == _countDownTimer.TimerLength;

    private bool CountDownRunning() => _countDownTimer.TimeLeft < _countDownTimer.TimerLength && _countDownTimer.Running;

    private bool CountDownPaused() => _countDownTimer.TimeLeft < _countDownTimer.TimerLength && !_countDownTimer.Running;

}
<div class="container-fluid">
    <div class="row justify-content-center">
        <div class="timer col-8 text-center">
            @_countDownTimer.ToString()
        </div>
    </div>
    <div class="row justify-content-center">
        <div class="timer col-8 text-center">
            @if (CountDownStarted())
            {
                <button class="btn btn-primary start-timer" @onclick=StartTimer>Start</button>
            }

            @if (CountDownRunning())
            {
                <button class="btn btn-primary pause-timer" @onclick=PauseTimer>Pause</button>
            }

            @if (CountDownPaused())
            {
                <button class="btn btn-primary resume-timer" @onclick=ResumeTimer>Resume</button>
            }
        </div>
    </div>
</div>